#!/usr/bin/env node
// @ts-check
const chalk = require('chalk').default
const program = require('commander')
// @ts-ignore
const { name: modName, version: modVersion } = require('../../package.json')

program.version(modVersion).usage('<command> [options]')

// tasks
const { initDatabase, setCollections } = require('../')

const actions = {
  bootstrapDatabase: async ({ username, password, database, collection }) => {
    await wrapCommand(initDatabase)({
      username,
      password,
      databaseName: database,
      collectionName: collection
    })
  },

  createCollection: async (
    pathToJson,
    { username, password, database, collection }
  ) => {
    wrapCommand(setCollections)({
      pathToJson: `./__mock__/${collection}.json`,
      username,
      password,
      database,
      collection
    })
  }
}

program
  .command('database')
  .option('-u, --username <user>', 'username for the db.')
  .option('-p, --password <password>', 'password for the db.')
  .option('-d, --database <database>', 'database name.')
  .option('-c, --collection <collection>', 'collection name.')
  .description(
    'creates a new database and collection, cracefully catching duplicate errors.'
  )
  .action(actions.bootstrapDatabase)

program
  .command('operations [path]')
  .option('-u, --username <user>', 'username for the db.')
  .option('-p, --password <password>', 'password for the db.')
  .option('-d, --database <database>', 'database name.')
  .option(
    '-c, --collection <collection>',
    'the collection to set the operations to.'
  )
  // tslint:disable:no-shadowed-variable
  .action(actions.createCollection)

program
  .command('connections [path]')
  .option('-u, --username <user>', 'username for the db.')
  .option('-p, --password <password>', 'password for the db.')
  .option('-d, --database <database>', 'database name.')
  .option(
    '-c, --collection <collection>',
    'the collection to set the connections to.'
  )
  .action(actions.createCollection)

program
  .command('quickstart')
  .option('-u, --username <user>', 'username for the db.')
  .option('-p, --password <password>', 'password for the db.')
  .action(({ username, password }) => {
    const defaults = {
      databaseName: 'epot',
      collections: ['operations', 'connections']
    }

    for (const collectionName of defaults.collections) {
      wrapCommand(initDatabase)({
        username,
        password,
        databaseName: defaults.databaseName,
        collectionName
      })

      wrapCommand(setCollections)({
        pathToJson: `./__mock__/${collectionName}.json`,
        username,
        password,
        database: defaults.databaseName,
        collection: collectionName
      })
    }
  })

const { validateOperationSchema } = require('../validateSchema')
const readFileAsync = require('../utils/readFileAsync')
const path = require('path')
program.command('validate').action(async () => {
  readFileAsync(path.resolve(process.cwd(), '__mock__/operations.json'), {
    encoding: 'utf8'
  }).then(data => {
    try {
      validateOperationSchema(JSON.parse(data)[0])
    } catch (err) {
      console.error(err)
    }
  })
})

program.parse(process.argv)

function wrapCommand(fn) {
  return (...args) => {
    return fn(...args).catch(err => {
      console.error(chalk.red(err.stack))
    })
  }
}
